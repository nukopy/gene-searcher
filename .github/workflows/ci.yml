name: "CI - format, lint, and test"

on:
  push:
    branches:
      - main
    paths-ignore:
      - ".gitignore"
      - "*.md"
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths-ignore:
      - ".gitignore"
      - "*.md"

jobs:
  format_and_lint:
    name: Format and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          # Issue ref: https://github.com/actions/setup-python/issues/436
          # cache: "pip"
          # cache-dependency-path: pyproject.toml
      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}-lint
      - name: Install Poetry
        run: pip install poetry
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          poetry export --with dev --without-hashes -o requirements.txt
          pip install -r requirements.txt
      - name: Format
        run: make format-no-overwrite
      - name: Lint
        run: make lint-no-overwrite
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.12"
          - "3.11" # latest version on Streamlit Community Cloud
          - "3.10"
      fail-fast: false
    needs: [format_and_lint]
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          # Issue ref: https://github.com/actions/setup-python/issues/436
          # cache: "pip"
          # cache-dependency-path: pyproject.toml
      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}-test
      - name: Install Poetry
        run: pip install poetry
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          poetry export --with dev --without-hashes -o requirements.txt
          pip install -r requirements.txt
      - name: Create coverage directory
        run: mkdir coverage
      - name: Test
        run: make test-with-coverage
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}
